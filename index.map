{"version":3,"sources":["webpack://library/webpack/universalModuleDefinition","webpack://library/webpack/bootstrap","webpack://library/./src-api/index.js","webpack://library/external \"apollo-server\""],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ApolloServer","typeDefs","resolvers","Query","hello","listen","port","process","env","PORT","then","_ref","url","console","log","require"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,UAAAH,GACA,iBAAAC,QACAA,QAAA,QAAAD,IAEAD,EAAA,QAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAT,YAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,oBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,kCCjCe,IAdfjC,EAAA,GAcmBkC,eACfC,SAbEA,sDAcFC,WAPAC,OACIC,MAAO,iBAAM,aAUhBC,QAASC,KAAMC,QAAQC,IAAIC,MAAQ,MACnCC,KAAK,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,IAAH,OAAaC,QAAQC,IAAR,qBAAiCF,oBCxDxDnD,EAAAD,QAAAuD,QAAA","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"library\"] = factory();\n\telse\n\t\troot[\"library\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","//\n//   TODO: Figure out Heroku Bug\n//\n//      [x] Get a simple server running on Heroku\n//         * Replace the root index.js file with simple ApolloSerer code\n//         * Does a simple \"hello world\" server have the same issue?\n//          ** Note ** had to add env variable for development. Playground wont run w/out that\n//      [ ] Get a simplewebpack build server running on Heroku\n//         * [ x] Move the code from the root index to this file\n//         * [ x ] Replace the \"require('module')\" with \"import\"\n//         * [ ] Build the root index and run on Heroku\n//         * Does a simple \"hello world\" server have the same issue?\n//      [ ] Import the typeDefs\n//         * [ ] Build the root index and run on Heroku\n//         * Does a simple \"hello world\" server have the same issue?\n//      [ ] Import the Resolvers\n//         * [ ] Build the root index and run on Heroku\n//         * Does a simple \"hello world\" server have the same issue?\n//      [ ] Add Mocks\n//         * [ ] Build the root index and run on Heroku\n//         * Does a simple \"hello world\" server have the same issue?\n//      [ ] Upgrade to apollo-server-express\n//         * [ ] Build the root index and run on Heroku\n//         * Does a simple \"hello world\" server have the same issue?\n//      [ ] Serve the Static ./build folder\n//         * [ ] Build the root index and run on Heroku\n//         * Does a simple \"hello world\" server have the same issue?\n//\n\n// Insert Code Here...\n\n//\n// TODO: Start Here\n//\n\nimport { ApolloServer } from 'apollo-server'\n\nconst typeDefs = `\n    type Query {\n        hello: String!\n    }\n`\n\nconst resolvers = {\n    Query: {\n        hello: () => \"world\"\n    }\n}\n\nconst server = new ApolloServer({\n    typeDefs,\n    resolvers\n})\n\nserver\n    .listen({ port: process.env.PORT || 4000 })\n    .then(({ url }) => console.log(`Server running on ${url}`))\n\n\n// import { ApolloServer } from 'apollo-server-express'\n// import express from 'express'\n// import typeDefs from './typeDefs.graphql'\n// import expressPlayground from 'graphql-playground-middleware-express'\n// import resolvers from './resolvers'\n\n// const app = express()\n\n// const server = new ApolloServer({\n//     typeDefs,\n//     resolvers,\n//     mocks: true\n// })\n\n// server.applyMiddleware({ app, cors: true })\n\n// app.get('/playground', expressPlayground({ endpoint: '/graphql' }))\n\n// app.use('/', express.static('./build'))\n\n// app.listen({ port: process.env.PORT || 3000 }, () =>\n//     console.log(`GraphQL Fun Running`))\n\n","module.exports = require(\"apollo-server\");"],"sourceRoot":""}